#!/usr/bin/env zx

const dot = chalk.gray("*") + " ";
const err = chalk.red("!") + " ";

// Need branch so we push correctly
let branch = await $`git branch --show-current`.quiet().catch(() => {
    console.log(`${err}Can't find current branch, are you in a git directory?`);
    process.exit(1)
});

branch = branch.stdout.trim();

// TODO
// Might be a little issue here if -f is written before the commit message
if (argv._.length != 2) {
    console.log(`${err}Please supply ${chalk.blue("1")} argument, you supplied ${chalk.yellow(argv._.length - 1)}`)
    process.exit(1);
}

// Commit message
const msg = argv._[1];

// git push -f ...
let force = false;
if (argv.f) {
    let input = await question(`${chalk.gray("?")} Are you ${chalk.underline.bold("sure")} you want to ${chalk.yellow("force push")} ? [y / N]`)
    if (input.toLowerCase() === "y") {
        console.log(dot + chalk.red.bold(`Forcing!`));
        force = true;
    } else {
        console.log(`${dot}Cancelled`);
        process.exit(0);
    }
}

// Run `git add * ` if -a is specified
// otherwise use only `git commit - a ...` to add tracked files
let addAll = false;
if (argv.a) {
    const files = await glob(["*"]);
    await $`git add ${files}`.quiet().catch(async () => {
        console.log(`${err}Something went wrong while trying to add files, reset.`);
        await $`git reset`.quiet().catch(() => console.log(`${err}Couldn't reset either...`));
        process.exit(1)
    });

    addAll = true;
}

console.log(`${dot}Added ${addAll ? chalk.green("all") : chalk.blue("tracked")} files`);

// Colourless output of `git status -s` split into clean lines
const staged = await $`git status --porcelain`.quiet();
const lines = staged.stdout
    .split("\n")
    .map(s => s.trim().split(" "))
    .filter(s => s.length > 1);

// Results in `<n> <title>` with title coloured with chalk.colour
const fmt = (colour, title, prefix) => {
    const c = lines.filter(l => l[0] == prefix).length;
    return c > 0 ? `${c} ${chalk[colour](title)}` : null;
}

if (lines.length < 1) {
    console.log(`${err}No files staged to commit.`);
    process.exit(1);
}

await $`git commit ${addAll ? "" : "-a"} -m "${msg}"`.quiet().catch(e => {
    console.log(`${err}Something went wrong while trying to commit`);
    console.log(e);
    process.exit(1);
});

let added = fmt("green", "new", "A");
let modified = fmt("yellow", "modified", "M");
let other = fmt("magenta", "other", true);

const changed = [added, modified, other].filter(i => i != null);

const list = arr => arr.length === 1
    ? arr[0]
    : arr.slice(0, arr.length - 1)
        .join(", ")
    + " and "
    + arr[arr.length - 1];

msg = chalk.green(msg).substring(0, 10) + length(msg) > 10 ? "..." : "";

console.log(`${dot}Committed ${list(changed)} file${changed.length > 1 ? "s" : ""} under "${msg}"`);

let flags = [
    "origin",
    branch,
    force ? "-f" : "",
]

await $`git push ${flags}`.quiet().catch(e => {
    console.log("Something went wrong while trying to push");
    console.log(e);
    process.exit(1);
})

console.log(`${dot}${force ? "Force p" : "P"}ushed to ${chalk.green(branch)}`);

// Done
